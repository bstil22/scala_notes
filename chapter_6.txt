## Chapter 6

class Rational(n: Int, d:Int)

Immutable objects advantages over mutable objects:
- no complex state changes over time
- pass around freely
- no way for two threads concurrently accessing an immutable to corrupt its state
- immutable objects make for safe hash table keys

The main disadvantage is that they sometimes require a large object graph to be copied where otherwise an update could be done in place

class Rational(n: Int, d: Int) {
  println("Created " + n + "/" + d)
}

The result of this code:

new Rational(1,2)
=> created 1/2

class Rational(n: Int, d: Int){
  override def toString = n + "/" + d
}

The override takes the place of the default toString method built into the class

We cannot have a zero denominator, so we can use require to make sure the d parameter is non-zero

class Rational(n: Int, d: Int){
  require(d != 0)
  override def toString = n + "/" + d
}

    class Rational(n: Int, d: Int) {
      require(d != 0)
      val numer: Int = n
      val denom: Int = d
      override def toString = numer +"/"+ denom
      def add(that: Rational): Rational =
        new Rational(
          numer * that.denom + that.numer * denom,
          denom * that.denom
        )
    }
    
this is required in order to access n and d, because you can only access them on the object from which add was invoked

the keyword this refers to the object instance on which the current executing method is invoked

def lessThan(that: Rational) = 
  this.numer * that.denom < that.numer * this.denom
  
this.numer refers to the numerator of the object on which lessThan was invoked

